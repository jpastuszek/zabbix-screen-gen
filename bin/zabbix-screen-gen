#!/usr/bin/env ruby
require 'builder'
require 'cli'
require 'sdl4r'

$> = STDERR

class Screen
	class Graph
		def initialize(builder, width, height, graph, host, x, y, dynamic = false)
			builder.screen_item do |screen_item|
				screen_item.resourcetype  "0"
				screen_item.width         width.to_s
				screen_item.height        height.to_s
				screen_item.x             x.to_s
				screen_item.y             y.to_s
				screen_item.colspan       "1"
				screen_item.rowspan       "1"
				screen_item.elements      "0"
				screen_item.valign        "0"
				screen_item.halign        "0"
				screen_item.style         "0"
				screen_item.url
				screen_item.dynamic       dynamic ? "1" : "0"
				screen_item.sort_triggers "0"

				screen_item.resource do |resource|
					resource.name graph
					resource.host host
				end
			end
		end
	end

	def initialize(builder, name, &block)
		@graphs = []
		@max_x = 0
		@max_y = 0

		instance_eval &block

		builder.screens do |screens|
			screens.screen do |screen|
				screen.name   name
				screen.hsize  @max_x + 1
				screen.vsize  @max_y + 1

				screen.screen_items do |screen_items|
					@graphs.each{|g| g.call(screen_items)}
				end
			end
		end
	end

	def graph(width, height, graph, host, x, y, dynamic = false)
		@max_x = x if x > @max_x
		@max_y = y if y > @max_y
		@graphs << ->(screen_items){Graph.new(screen_items, width, height, graph, host, x, y, dynamic)}
	end
end

settings = CLI.new do
	description "Generates Zabbix import XML to standard output based on configuration file"
	argument :config,
		description: "path to configuration file to use",
		cast: Pathname
	option :out_file,
		cast: ->(f){File.new(f, 'w')},
		short: :o
end.parse!

config = SDL4R.read(settings.config)

builder = Builder::XmlMarkup.new(target: settings.out_file ? settings.out_file : STDOUT, indent: 4)
builder.instruct! :xml, version: "1.0", encoding: "UTF-8"

def screen_row(graphs, hosts)
	row = []
	hosts.children.each_with_index do |host|
		host_name = host.values.first
		g = graphs.select do |graph|
			just = graph.attributes['just']
			just and (just.split(',').include? host_name or next)
			exclude = graph.attributes['exclude']
			exclude and (exclude.split(',').include? host_name and next)
			true
		end

		if g.empty?
			row << [host_name, nil]
		elsif g.length == 1
			row << [host_name, g.first.value]
		else
			fail "more than one graph for host entry: #{g} #{host_name}"
		end
	end
	row
end

def graph_map(graphs, hosts)
	graphs.children.each_with_index do |graph, row|
		type = graph.attribute('type') || '1axis'
		graphs = graph.has_children? ? graph.children : [graph]
		screen_row(graphs, hosts).each_with_index do |host_graph, col|
			host_name, graph = *host_graph
			next unless graph
			yield host_name, graph, row, col, type
		end
	end
end


builder.zabbix_export do |export|
	export.version "2.0"
	export.date Time.now.utc.strftime("%Y-%m-%dT%H:%M:%SZ")

	dynamic = config.has_child? 'dynamic'
	name = config.child('name').values.first
	gwidth = (c = config.child('width') and c.values.first) || 450

	Screen.new(export, name) do
		graph_map(config.child('graphs'), config.child('hosts')) do |host_name, graph, row, col, type|
			width = gwidth
			height = 100
			case type
			when '2axis'
				width -= 55
			when 'pie'
				width += 116
				height += 100
			end
			graph(width, height, graph, host_name, col, row, dynamic)
		end
	end
end

