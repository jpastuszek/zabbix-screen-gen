#!/usr/bin/env ruby
require 'builder'
require 'cli'
require 'sdl4r'

$> = STDERR

class Screen
	class Graph
		def initialize(builder, width, graph, host, x, y)
			builder.screen_item do |screen_item|
				screen_item.resourcetype  "0"
				screen_item.width         width.to_s
				screen_item.height        "100"
				screen_item.x             x.to_s
				screen_item.y             y.to_s
				screen_item.colspan       "1"
				screen_item.rowspan       "1"
				screen_item.elements      "0"
				screen_item.valign        "0"
				screen_item.halign        "0"
				screen_item.style         "0"
				screen_item.url
				screen_item.dynamic       "0"
				screen_item.sort_triggers "0"

				screen_item.resource do |resource|
					resource.name graph
					resource.host host
				end
			end
		end
	end

	def initialize(builder, name, width, &block)
		@graphs = []
		@max_x = 0
		@max_y = 0

		instance_eval &block

		builder.screens do |screens|
			screens.screen do |screen|
				screen.name   name
				screen.hsize  @max_x + 2
				screen.vsize  @max_y + 2

				screen.screen_items do |screen_items|
					@graphs.each{|g| g.call(screen_items)}
				end
			end
		end
	end

	def graph(width, graph, host, x, y)
		@max_x = x if x > @max_x
		@max_y = y if y > @max_y
		@graphs << ->(screen_items){Graph.new(screen_items, width, graph, host, x, y)}
	end
end

settings = CLI.new do
	description "Generates Zabbix import XML to standard output based on configuration file"
	argument :config,
		description: "path to configuration file to use",
		cast: Pathname
	option :out_file,
		cast: ->(f){File.new(f, 'w')},
		short: :o
end.parse!

config = SDL4R.read(settings.config)

builder = Builder::XmlMarkup.new(target: settings.out_file ? settings.out_file : STDOUT, indent: 4)
builder.instruct! :xml, version: "1.0", encoding: "UTF-8"



builder.zabbix_export do |export|
	export.version "2.0"
	export.date Time.now.utc.strftime("%Y-%m-%dT%H:%M:%SZ")

	name = config.child('name').values.first
	width = (c = config.child('width') && c.values.first)

	Screen.new(export, name, width || 1000) do
		config.child('graphs').children.each_with_index do |graph, graph_no|
			config.child('hosts').children.each_with_index do |host, host_no|
				host_name = host.values.first

				just = graph.attributes['just']
				just and (just.split(',').include? host_name or next)
				exclude = graph.attributes['exclude']
				exclude and (exclude.split(',').include? host_name and next)

				graph(450, graph.values.first, host_name, host_no, graph_no)
			end
		end
	end
end

